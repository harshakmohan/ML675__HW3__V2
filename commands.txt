Train 2-layer NN:

python3 main.py train --data-dir data --log-file logs/ff-logs.csv --model-save modelfiles/ff.torch --model simple-ff

Test 2-layer NN:

python3 main.py predict --data-dir data --log-file logs/ff-logs1.csv --model-save modelfiles/ff.torch1 --predictions-file preds/ff-preds.txt


Train CNN:

python3 main.py train --data-dir data --log-file logs/simple-cnn-logs.csv --model-save modelfiles/simple-cnn.torch --model simple-cnn --batch-size 50
python3 main.py train --data-dir data --log-file logs/simple-cnn-logs1.csv --model-save modelfiles/simple-cnn1.torch --model simple-cnn --batch-size 250

# Reduce learning rate
python3 main.py train --data-dir data --log-file logs/simple-cnn-logs.csv --model-save modelfiles/simple-cnn.torch --model simple-cnn --batch-size 250 --learning-rate 0.0005


Test CNN:

python3 main.py predict --data-dir data --log-file logs/simple-cnn-logs1.csv --model-save modelfiles/simple-cnn1.torch --predictions-file preds/simple-cnn-preds1.txt

Train BNN:

python3 main.py train --data-dir data --log-file logs/best-nn-logs2.csv --model-save modelfiles/best-nn.torch2 --model best --batch-size 200

